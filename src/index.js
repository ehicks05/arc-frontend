import React from "react";
import { render } from "react-dom";
import { QueryClient, QueryClientProvider } from "react-query";
import {
  ApolloClient,
  ApolloLink,
  HttpLink,
  InMemoryCache,
  ApolloProvider,
} from "@apollo/client";
import { setContext } from "@apollo/client/link/context";
// import { persistCache, LocalStorageWrapper } from "apollo3-cache-persist";
import createAuth0Client from "@auth0/auth0-spa-js";
import { Auth0Provider } from "@auth0/auth0-react";

// generated by Fragment Matcher plugin
// import generatedIntrospection from "../introspection-result";

import "./index.css";
import App from "./App";

const queryClient = new QueryClient();

/* Make sure auth0 client is available before AuthProvider gets assigned */
createAuth0Client({
  domain: process.env.REACT_APP_DOMAIN,
  client_id: process.env.REACT_APP_CLIENT_ID,
  audience: process.env.REACT_APP_AUDIENCE,
  redirect_uri: window.location.origin,
}).then(async (auth0) => {
  const auth0Client = auth0;

  /* Set URI for all Apollo GraphQL requests (backend api) */
  const httpLink = new HttpLink({
    uri: "http://localhost:4000/graphql",
    fetchOptions: { credentials: "same-origin" },
  });

  /* Set in-memory token to reduce async requests */
  let token;

  /* Create Apollo Link to supply token with either
   * in-memory ref or auth0 req'ed token or redirect (built into
   * getTokenSilently
   */
  const withTokenLink = setContext(async () => {
    // return token if there
    if (token) return { auth0Token: token };

    // else check if valid token exists with client already and set if so
    let newToken;
    try {
      newToken = await auth0Client.getTokenSilently();
    } catch (err) {
      console.log("make login optional: " + err);
    }
    token = newToken;
    return { auth0Token: newToken };
  });

  /* Create Apollo Link to supply token in auth header with every gql request */
  const authLink = setContext((_, { headers, auth0Token }) => ({
    headers: {
      ...headers,
      ...(auth0Token ? { authorization: `Bearer ${auth0Token}` } : {}),
    },
  }));

  /* Create Apollo Link array to pass to Apollo Client */
  const link = ApolloLink.from([withTokenLink, authLink, httpLink]);

  /* Set up local cache */
  const cache = new InMemoryCache({
    // possibleTypes: generatedIntrospection.possibleTypes,
  });

  /* Create Apollo Client */
  const client = new ApolloClient({
    link,
    cache,
  });

  // await before instantiating ApolloClient, else queries might run before the cache is persisted
  // await persistCache({
  //   cache,
  //   storage: new LocalStorageWrapper(window.localStorage),
  // });

  /* Create root render function */
  const renderApp = (Component) => {
    render(
      <ApolloProvider client={client}>
        <Auth0Provider
          domain={process.env.REACT_APP_DOMAIN}
          clientId={process.env.REACT_APP_CLIENT_ID}
          audience={process.env.REACT_APP_AUDIENCE}
          redirectUri={window.location.origin}
          auth0Client={auth0Client}
          scope={"read:whatever"}
        >
          <QueryClientProvider client={queryClient}>
            <App />
          </QueryClientProvider>
        </Auth0Provider>
      </ApolloProvider>,
      document.getElementById("root")
    );
  };

  renderApp(App);
});
